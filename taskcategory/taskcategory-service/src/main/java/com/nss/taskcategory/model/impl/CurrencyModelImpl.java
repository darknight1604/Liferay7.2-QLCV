/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nss.taskcategory.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.nss.taskcategory.model.Currency;
import com.nss.taskcategory.model.CurrencyModel;
import com.nss.taskcategory.model.CurrencySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Currency service. Represents a row in the &quot;nss_taskcategory_currency&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CurrencyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CurrencyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CurrencyImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CurrencyModelImpl
	extends BaseModelImpl<Currency> implements CurrencyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a currency model instance should use the <code>Currency</code> interface instead.
	 */
	public static final String TABLE_NAME = "nss_taskcategory_currency";

	public static final Object[][] TABLE_COLUMNS = {
		{"currencyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"name", Types.VARCHAR},
		{"code_", Types.VARCHAR}, {"priority", Types.INTEGER},
		{"active_", Types.BOOLEAN}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("currencyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nss_taskcategory_currency (currencyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(255) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(255) null,code_ VARCHAR(75) null,priority INTEGER,active_ BOOLEAN,description STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table nss_taskcategory_currency";

	public static final String ORDER_BY_JPQL =
		" ORDER BY currency.priority ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nss_taskcategory_currency.priority ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTIVE_COLUMN_BITMASK = 1L;

	public static final long CODE_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long PRIORITY_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Currency toModel(CurrencySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Currency model = new CurrencyImpl();

		model.setCurrencyId(soapModel.getCurrencyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setCode(soapModel.getCode());
		model.setPriority(soapModel.getPriority());
		model.setActive(soapModel.isActive());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Currency> toModels(CurrencySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Currency> models = new ArrayList<Currency>(soapModels.length);

		for (CurrencySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CurrencyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCurrencyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _currencyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Currency.class;
	}

	@Override
	public String getModelClassName() {
		return Currency.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Currency, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Currency, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Currency, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Currency)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Currency, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Currency, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Currency)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Currency, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Currency, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Currency>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Currency.class.getClassLoader(), Currency.class,
			ModelWrapper.class);

		try {
			Constructor<Currency> constructor =
				(Constructor<Currency>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Currency, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Currency, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Currency, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Currency, Object>>();
		Map<String, BiConsumer<Currency, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Currency, ?>>();

		attributeGetterFunctions.put("currencyId", Currency::getCurrencyId);
		attributeSetterBiConsumers.put(
			"currencyId", (BiConsumer<Currency, Long>)Currency::setCurrencyId);
		attributeGetterFunctions.put("groupId", Currency::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Currency, Long>)Currency::setGroupId);
		attributeGetterFunctions.put("companyId", Currency::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Currency, Long>)Currency::setCompanyId);
		attributeGetterFunctions.put("userId", Currency::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Currency, Long>)Currency::setUserId);
		attributeGetterFunctions.put("userName", Currency::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Currency, String>)Currency::setUserName);
		attributeGetterFunctions.put("createDate", Currency::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Currency, Date>)Currency::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Currency::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Currency, Date>)Currency::setModifiedDate);
		attributeGetterFunctions.put("name", Currency::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Currency, String>)Currency::setName);
		attributeGetterFunctions.put("code", Currency::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<Currency, String>)Currency::setCode);
		attributeGetterFunctions.put("priority", Currency::getPriority);
		attributeSetterBiConsumers.put(
			"priority", (BiConsumer<Currency, Integer>)Currency::setPriority);
		attributeGetterFunctions.put("active", Currency::getActive);
		attributeSetterBiConsumers.put(
			"active", (BiConsumer<Currency, Boolean>)Currency::setActive);
		attributeGetterFunctions.put("description", Currency::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Currency, String>)Currency::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCurrencyId() {
		return _currencyId;
	}

	@Override
	public void setCurrencyId(long currencyId) {
		_currencyId = currencyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_columnBitmask = -1L;

		_priority = priority;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Currency.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Currency toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Currency>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CurrencyImpl currencyImpl = new CurrencyImpl();

		currencyImpl.setCurrencyId(getCurrencyId());
		currencyImpl.setGroupId(getGroupId());
		currencyImpl.setCompanyId(getCompanyId());
		currencyImpl.setUserId(getUserId());
		currencyImpl.setUserName(getUserName());
		currencyImpl.setCreateDate(getCreateDate());
		currencyImpl.setModifiedDate(getModifiedDate());
		currencyImpl.setName(getName());
		currencyImpl.setCode(getCode());
		currencyImpl.setPriority(getPriority());
		currencyImpl.setActive(isActive());
		currencyImpl.setDescription(getDescription());

		currencyImpl.resetOriginalValues();

		return currencyImpl;
	}

	@Override
	public int compareTo(Currency currency) {
		int value = 0;

		if (getPriority() < currency.getPriority()) {
			value = -1;
		}
		else if (getPriority() > currency.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Currency)) {
			return false;
		}

		Currency currency = (Currency)obj;

		long primaryKey = currency.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CurrencyModelImpl currencyModelImpl = this;

		currencyModelImpl._originalCompanyId = currencyModelImpl._companyId;

		currencyModelImpl._setOriginalCompanyId = false;

		currencyModelImpl._setModifiedDate = false;

		currencyModelImpl._originalCode = currencyModelImpl._code;

		currencyModelImpl._originalActive = currencyModelImpl._active;

		currencyModelImpl._setOriginalActive = false;

		currencyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Currency> toCacheModel() {
		CurrencyCacheModel currencyCacheModel = new CurrencyCacheModel();

		currencyCacheModel.currencyId = getCurrencyId();

		currencyCacheModel.groupId = getGroupId();

		currencyCacheModel.companyId = getCompanyId();

		currencyCacheModel.userId = getUserId();

		currencyCacheModel.userName = getUserName();

		String userName = currencyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			currencyCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			currencyCacheModel.createDate = createDate.getTime();
		}
		else {
			currencyCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			currencyCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			currencyCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		currencyCacheModel.name = getName();

		String name = currencyCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			currencyCacheModel.name = null;
		}

		currencyCacheModel.code = getCode();

		String code = currencyCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			currencyCacheModel.code = null;
		}

		currencyCacheModel.priority = getPriority();

		currencyCacheModel.active = isActive();

		currencyCacheModel.description = getDescription();

		String description = currencyCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			currencyCacheModel.description = null;
		}

		return currencyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Currency, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Currency, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Currency, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Currency)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Currency, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Currency, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Currency, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Currency)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Currency>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _currencyId;
	private long _groupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _code;
	private String _originalCode;
	private int _priority;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private String _description;
	private long _columnBitmask;
	private Currency _escapedModel;

}