/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nss.commoncategory.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.nss.commoncategory.model.Address;
import com.nss.commoncategory.model.AddressModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Address service. Represents a row in the &quot;nss_commoncategory_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AddressModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressImpl
 * @generated
 */
@ProviderType
public class AddressModelImpl
	extends BaseModelImpl<Address> implements AddressModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address model instance should use the <code>Address</code> interface instead.
	 */
	public static final String TABLE_NAME = "nss_commoncategory_address";

	public static final Object[][] TABLE_COLUMNS = {
		{"addressId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"classNameId", Types.BIGINT},
		{"classPK", Types.BIGINT}, {"countryId", Types.BIGINT},
		{"cityId", Types.BIGINT}, {"districtId", Types.BIGINT},
		{"wardId", Types.BIGINT}, {"streetId", Types.BIGINT},
		{"streetOther", Types.VARCHAR}, {"quarter", Types.VARCHAR},
		{"houseNumber", Types.VARCHAR}, {"building", Types.VARCHAR},
		{"floor", Types.VARCHAR}, {"room", Types.VARCHAR},
		{"type_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("districtId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("wardId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("streetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("streetOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quarter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("houseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("building", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("floor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("room", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table nss_commoncategory_address (addressId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,countryId LONG,cityId LONG,districtId LONG,wardId LONG,streetId LONG,streetOther VARCHAR(75) null,quarter VARCHAR(75) null,houseNumber VARCHAR(75) null,building VARCHAR(75) null,floor VARCHAR(75) null,room VARCHAR(75) null,type_ INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table nss_commoncategory_address";

	public static final String ORDER_BY_JPQL =
		" ORDER BY address.addressId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY nss_commoncategory_address.addressId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;

	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long TYPE_COLUMN_BITMASK = 8L;

	public static final long ADDRESSID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AddressModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Address.class;
	}

	@Override
	public String getModelClassName() {
		return Address.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Address)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Address, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Address, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Address)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Address, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Address, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Address>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Address.class.getClassLoader(), Address.class, ModelWrapper.class);

		try {
			Constructor<Address> constructor =
				(Constructor<Address>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Address, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Address, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Address, Object>>();
		Map<String, BiConsumer<Address, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Address, ?>>();

		attributeGetterFunctions.put("addressId", Address::getAddressId);
		attributeSetterBiConsumers.put(
			"addressId", (BiConsumer<Address, Long>)Address::setAddressId);
		attributeGetterFunctions.put("groupId", Address::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Address, Long>)Address::setGroupId);
		attributeGetterFunctions.put("companyId", Address::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Address, Long>)Address::setCompanyId);
		attributeGetterFunctions.put("userId", Address::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Address, Long>)Address::setUserId);
		attributeGetterFunctions.put("userName", Address::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Address, String>)Address::setUserName);
		attributeGetterFunctions.put("createDate", Address::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Address, Date>)Address::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Address::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Address, Date>)Address::setModifiedDate);
		attributeGetterFunctions.put("classNameId", Address::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId", (BiConsumer<Address, Long>)Address::setClassNameId);
		attributeGetterFunctions.put("classPK", Address::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK", (BiConsumer<Address, Long>)Address::setClassPK);
		attributeGetterFunctions.put("countryId", Address::getCountryId);
		attributeSetterBiConsumers.put(
			"countryId", (BiConsumer<Address, Long>)Address::setCountryId);
		attributeGetterFunctions.put("cityId", Address::getCityId);
		attributeSetterBiConsumers.put(
			"cityId", (BiConsumer<Address, Long>)Address::setCityId);
		attributeGetterFunctions.put("districtId", Address::getDistrictId);
		attributeSetterBiConsumers.put(
			"districtId", (BiConsumer<Address, Long>)Address::setDistrictId);
		attributeGetterFunctions.put("wardId", Address::getWardId);
		attributeSetterBiConsumers.put(
			"wardId", (BiConsumer<Address, Long>)Address::setWardId);
		attributeGetterFunctions.put("streetId", Address::getStreetId);
		attributeSetterBiConsumers.put(
			"streetId", (BiConsumer<Address, Long>)Address::setStreetId);
		attributeGetterFunctions.put("streetOther", Address::getStreetOther);
		attributeSetterBiConsumers.put(
			"streetOther",
			(BiConsumer<Address, String>)Address::setStreetOther);
		attributeGetterFunctions.put("quarter", Address::getQuarter);
		attributeSetterBiConsumers.put(
			"quarter", (BiConsumer<Address, String>)Address::setQuarter);
		attributeGetterFunctions.put("houseNumber", Address::getHouseNumber);
		attributeSetterBiConsumers.put(
			"houseNumber",
			(BiConsumer<Address, String>)Address::setHouseNumber);
		attributeGetterFunctions.put("building", Address::getBuilding);
		attributeSetterBiConsumers.put(
			"building", (BiConsumer<Address, String>)Address::setBuilding);
		attributeGetterFunctions.put("floor", Address::getFloor);
		attributeSetterBiConsumers.put(
			"floor", (BiConsumer<Address, String>)Address::setFloor);
		attributeGetterFunctions.put("room", Address::getRoom);
		attributeSetterBiConsumers.put(
			"room", (BiConsumer<Address, String>)Address::setRoom);
		attributeGetterFunctions.put("type", Address::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Address, Integer>)Address::setType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		_columnBitmask = -1L;

		_addressId = addressId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@Override
	public long getCityId() {
		return _cityId;
	}

	@Override
	public void setCityId(long cityId) {
		_cityId = cityId;
	}

	@Override
	public long getDistrictId() {
		return _districtId;
	}

	@Override
	public void setDistrictId(long districtId) {
		_districtId = districtId;
	}

	@Override
	public long getWardId() {
		return _wardId;
	}

	@Override
	public void setWardId(long wardId) {
		_wardId = wardId;
	}

	@Override
	public long getStreetId() {
		return _streetId;
	}

	@Override
	public void setStreetId(long streetId) {
		_streetId = streetId;
	}

	@Override
	public String getStreetOther() {
		if (_streetOther == null) {
			return "";
		}
		else {
			return _streetOther;
		}
	}

	@Override
	public void setStreetOther(String streetOther) {
		_streetOther = streetOther;
	}

	@Override
	public String getQuarter() {
		if (_quarter == null) {
			return "";
		}
		else {
			return _quarter;
		}
	}

	@Override
	public void setQuarter(String quarter) {
		_quarter = quarter;
	}

	@Override
	public String getHouseNumber() {
		if (_houseNumber == null) {
			return "";
		}
		else {
			return _houseNumber;
		}
	}

	@Override
	public void setHouseNumber(String houseNumber) {
		_houseNumber = houseNumber;
	}

	@Override
	public String getBuilding() {
		if (_building == null) {
			return "";
		}
		else {
			return _building;
		}
	}

	@Override
	public void setBuilding(String building) {
		_building = building;
	}

	@Override
	public String getFloor() {
		if (_floor == null) {
			return "";
		}
		else {
			return _floor;
		}
	}

	@Override
	public void setFloor(String floor) {
		_floor = floor;
	}

	@Override
	public String getRoom() {
		if (_room == null) {
			return "";
		}
		else {
			return _room;
		}
	}

	@Override
	public void setRoom(String room) {
		_room = room;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Address.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Address toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Address>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressImpl addressImpl = new AddressImpl();

		addressImpl.setAddressId(getAddressId());
		addressImpl.setGroupId(getGroupId());
		addressImpl.setCompanyId(getCompanyId());
		addressImpl.setUserId(getUserId());
		addressImpl.setUserName(getUserName());
		addressImpl.setCreateDate(getCreateDate());
		addressImpl.setModifiedDate(getModifiedDate());
		addressImpl.setClassNameId(getClassNameId());
		addressImpl.setClassPK(getClassPK());
		addressImpl.setCountryId(getCountryId());
		addressImpl.setCityId(getCityId());
		addressImpl.setDistrictId(getDistrictId());
		addressImpl.setWardId(getWardId());
		addressImpl.setStreetId(getStreetId());
		addressImpl.setStreetOther(getStreetOther());
		addressImpl.setQuarter(getQuarter());
		addressImpl.setHouseNumber(getHouseNumber());
		addressImpl.setBuilding(getBuilding());
		addressImpl.setFloor(getFloor());
		addressImpl.setRoom(getRoom());
		addressImpl.setType(getType());

		addressImpl.resetOriginalValues();

		return addressImpl;
	}

	@Override
	public int compareTo(Address address) {
		int value = 0;

		if (getAddressId() < address.getAddressId()) {
			value = -1;
		}
		else if (getAddressId() > address.getAddressId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Address)) {
			return false;
		}

		Address address = (Address)obj;

		long primaryKey = address.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AddressModelImpl addressModelImpl = this;

		addressModelImpl._originalCompanyId = addressModelImpl._companyId;

		addressModelImpl._setOriginalCompanyId = false;

		addressModelImpl._setModifiedDate = false;

		addressModelImpl._originalClassNameId = addressModelImpl._classNameId;

		addressModelImpl._setOriginalClassNameId = false;

		addressModelImpl._originalClassPK = addressModelImpl._classPK;

		addressModelImpl._setOriginalClassPK = false;

		addressModelImpl._originalType = addressModelImpl._type;

		addressModelImpl._setOriginalType = false;

		addressModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Address> toCacheModel() {
		AddressCacheModel addressCacheModel = new AddressCacheModel();

		addressCacheModel.addressId = getAddressId();

		addressCacheModel.groupId = getGroupId();

		addressCacheModel.companyId = getCompanyId();

		addressCacheModel.userId = getUserId();

		addressCacheModel.userName = getUserName();

		String userName = addressCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			addressCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			addressCacheModel.createDate = createDate.getTime();
		}
		else {
			addressCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			addressCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			addressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		addressCacheModel.classNameId = getClassNameId();

		addressCacheModel.classPK = getClassPK();

		addressCacheModel.countryId = getCountryId();

		addressCacheModel.cityId = getCityId();

		addressCacheModel.districtId = getDistrictId();

		addressCacheModel.wardId = getWardId();

		addressCacheModel.streetId = getStreetId();

		addressCacheModel.streetOther = getStreetOther();

		String streetOther = addressCacheModel.streetOther;

		if ((streetOther != null) && (streetOther.length() == 0)) {
			addressCacheModel.streetOther = null;
		}

		addressCacheModel.quarter = getQuarter();

		String quarter = addressCacheModel.quarter;

		if ((quarter != null) && (quarter.length() == 0)) {
			addressCacheModel.quarter = null;
		}

		addressCacheModel.houseNumber = getHouseNumber();

		String houseNumber = addressCacheModel.houseNumber;

		if ((houseNumber != null) && (houseNumber.length() == 0)) {
			addressCacheModel.houseNumber = null;
		}

		addressCacheModel.building = getBuilding();

		String building = addressCacheModel.building;

		if ((building != null) && (building.length() == 0)) {
			addressCacheModel.building = null;
		}

		addressCacheModel.floor = getFloor();

		String floor = addressCacheModel.floor;

		if ((floor != null) && (floor.length() == 0)) {
			addressCacheModel.floor = null;
		}

		addressCacheModel.room = getRoom();

		String room = addressCacheModel.room;

		if ((room != null) && (room.length() == 0)) {
			addressCacheModel.room = null;
		}

		addressCacheModel.type = getType();

		return addressCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Address)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Address, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Address, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Address, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Address)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Address>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _addressId;
	private long _groupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _countryId;
	private long _cityId;
	private long _districtId;
	private long _wardId;
	private long _streetId;
	private String _streetOther;
	private String _quarter;
	private String _houseNumber;
	private String _building;
	private String _floor;
	private String _room;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private long _columnBitmask;
	private Address _escapedModel;

}